initial.h
#ifndef INITIAL_H #define INITIAL_H
#define mic A0 #define left1 11 #define left2 A1 #define left3 A2 #define left4 A3 #define left5 A4 #define middle1 A5 #define middle2 2
#define middle3 3
#define middle4 4
#define middle5 5
#define right1 6
#define right2 7
#define right3 8
#define right4 9
#define right5 10 int temp = 0; char CONTROL; char data='x'; char mode;
char bluetooth_data; double freq_read();
const int LED[15] = {left1, left2, left3, left4, left5, middle1, middle2, middle3,
46
middle4, middle5, right1, right2, right3, right4, right5}; const int A[10] = {A4, A3, A2, A1, A5, 7, 8, 9, 10, 3};
const int B[10] = {A4, A3, A2, A1, 11, A5, 7, 3, 9, 5};
const int C[7] = {6, A5, A1, A2, A3, 5, 10};
const int D[10] = {A4, A3, A2, A1, 11, A5, 7, 8, 9, 5};
const int E[11] = {6, A5, 11, A1, A2, 3, 8, A3, A4, 5, 10};
const int F[9] = {6, A5, 11, A1, A2, A3, A4, 3, 8};
const int G[12] = {6, A5, 11, A1, A2, A3, A4, 5, 10, 9, 8, 3};
const int H[11] = {11, A1, A2, A3, A4, 3, 6, 7, 8, 9, 10};
const int I[9] = {11, A5, 6, 2, 3, 4, A4, 5, 10};
const int J[7] = {11, A5, 6, 2, 3, 4, A4};
const int K[10] = {11, A1, A2, A3, A4, 6, 2, 4, 10};
const int L[7] = {11, A1, A2, A3, A4, 5, 10};
const int M[11] = {A4, A3, A2, A1, 11, 2, 6, 7, 8, 9, 10};
const int N[7] = {A3, A2, A1, 3, 9, 8, 7};
const int O[8] = {A5, A1, A2, A3, 5, 9, 8, 7};
const int P[10] = {A4, A3, A2, A1, 11, A5, 6, 7, 8, 3};
const int Q[9] = {A5, A1, A2, 4, 8, 7, 3, 5, 10};
const int R[11] = {A4, A3, A2, A1, 11, A5, 6, 7, 3, 9, 10};
const int S[9] = {6, A5, A1, A2, 3, 8, 9, 5, A4};
const int T[7] = {11, A5, 6, 2, 3, 4, 5};
const int U[11] = {11, A1, A2, A3, A4, 5, 10, 9, 8, 7, 6};
const int V[9] = {11, A1, A2, A3, 5, 9, 8, 7, 6};
const int W[11] = {11, A1, A2, A3, A4, 4, 10, 9, 8, 7, 6};
const int X[9] = {11, A1, 3, 9, 10, 6, 7, A3, A4};
const int Y[7] = {11, A1, 3, 7, 6, 4, 5};
const int Z[9] = {11, A5, 6, 7, 3, A3, A4, 5, 10};
const int N0[8] = {A5, A1, A2, A3, 5, 9, 8, 7};
const int N1[8] = {A1, A5, 2, 3, 4, 5, A4, 10};
47
middle4, middle5, right1, right2, right3, right4, right5}; const int A[10] = {A4, A3, A2, A1, A5, 7, 8, 9, 10, 3};
const int B[10] = {A4, A3, A2, A1, 11, A5, 7, 3, 9, 5};
const int C[7] = {6, A5, A1, A2, A3, 5, 10};
const int D[10] = {A4, A3, A2, A1, 11, A5, 7, 8, 9, 5};
const int E[11] = {6, A5, 11, A1, A2, 3, 8, A3, A4, 5, 10};
const int F[9] = {6, A5, 11, A1, A2, A3, A4, 3, 8};
const int G[12] = {6, A5, 11, A1, A2, A3, A4, 5, 10, 9, 8, 3};
const int H[11] = {11, A1, A2, A3, A4, 3, 6, 7, 8, 9, 10};
const int I[9] = {11, A5, 6, 2, 3, 4, A4, 5, 10};
const int J[7] = {11, A5, 6, 2, 3, 4, A4};
const int K[10] = {11, A1, A2, A3, A4, 6, 2, 4, 10};
const int L[7] = {11, A1, A2, A3, A4, 5, 10};
const int M[11] = {A4, A3, A2, A1, 11, 2, 6, 7, 8, 9, 10};
const int N[7] = {A3, A2, A1, 3, 9, 8, 7};
const int O[8] = {A5, A1, A2, A3, 5, 9, 8, 7};
const int P[10] = {A4, A3, A2, A1, 11, A5, 6, 7, 8, 3};
const int Q[9] = {A5, A1, A2, 4, 8, 7, 3, 5, 10};
const int R[11] = {A4, A3, A2, A1, 11, A5, 6, 7, 3, 9, 10};
const int S[9] = {6, A5, A1, A2, 3, 8, 9, 5, A4};
const int T[7] = {11, A5, 6, 2, 3, 4, 5};
const int U[11] = {11, A1, A2, A3, A4, 5, 10, 9, 8, 7, 6};
const int V[9] = {11, A1, A2, A3, 5, 9, 8, 7, 6};
const int W[11] = {11, A1, A2, A3, A4, 4, 10, 9, 8, 7, 6};
const int X[9] = {11, A1, 3, 9, 10, 6, 7, A3, A4};
const int Y[7] = {11, A1, 3, 7, 6, 4, 5};
const int Z[9] = {11, A5, 6, 7, 3, A3, A4, 5, 10};
const int N0[8] = {A5, A1, A2, A3, 5, 9, 8, 7};
const int N1[8] = {A1, A5, 2, 3, 4, 5, A4, 10};
48
const int N2[8] = {A1, A5, 7, 3, A3, A4, 5, 10};
const int N3[7] = {11, A5, 7, 3, 9, 5, A4};
const int N4[8] = {11, A1, A2, A3, 4, 9, 3, 5};
const int N5[9] = {6, A5, 11, A1, A2, 3, 9, 5, A4};
const int N6[7] = {A5, A1, A2, A3, 5, 9, 3};
const int N7[8] = {11, A5, 2, 3, 4, 5, A2, 8};
const int N8[7] = {A5, A1, 3, 9, 5, A3, 7};
const int N9[7] = {A5, A1, 3, 7, 8, 9, 10};
#endif
lcd.h
#ifndef LCD_H #define LCD_H
#include <LiquidCrystal.h> LiquidCrystal lcd(14, 15, 16, 17, 18, 19); #endif
mic_frequency.h
#ifndef AUDIO_FREQ_H #define AUDIO_FREQ_H #include "arduinoFFT.h"
#define SAMPLES 128 //SAMPLES-pt FFT. Must be a base 2 number. Max 128 for Arduino Uno.
#define SAMPLING_FREQUENCY 2048 //Ts = Based on Nyquist, must be 2 times the highest expected frequency.
arduinoFFT FFT = arduinoFFT();
49
const int N2[8] = {A1, A5, 7, 3, A3, A4, 5, 10};
const int N3[7] = {11, A5, 7, 3, 9, 5, A4};
const int N4[8] = {11, A1, A2, A3, 4, 9, 3, 5};
const int N5[9] = {6, A5, 11, A1, A2, 3, 9, 5, A4};
const int N6[7] = {A5, A1, A2, A3, 5, 9, 3};
const int N7[8] = {11, A5, 2, 3, 4, 5, A2, 8};
const int N8[7] = {A5, A1, 3, 9, 5, A3, 7};
const int N9[7] = {A5, A1, 3, 7, 8, 9, 10};
#endif
lcd.h
#ifndef LCD_H #define LCD_H
#include <LiquidCrystal.h> LiquidCrystal lcd(14, 15, 16, 17, 18, 19); #endif
mic_frequency.h
#ifndef AUDIO_FREQ_H #define AUDIO_FREQ_H #include "arduinoFFT.h"
#define SAMPLES 128 //SAMPLES-pt FFT. Must be a base 2 number. Max 128 for Arduino Uno.
#define SAMPLING_FREQUENCY 2048 //Ts = Based on Nyquist, must be 2 times the highest expected frequency.
arduinoFFT FFT = arduinoFFT();
50
unsigned int samplingPeriod; unsigned long microSeconds;
double vReal[SAMPLES]; //create vector of size SAMPLES to hold real values
double vImag[SAMPLES]; //create vector of size SAMPLES to hold imaginary values
int peak = 0; void freq_init()
{
samplingPeriod = round(1000000 * (1.0 / SAMPLING_FREQUENCY)); //Period in microseconds
}
double freq_read()
{
/*Sample SAMPLES times*/
for (int i = 0; i < SAMPLES; i++)
{
microSeconds = micros(); //Returns the number of microseconds since the Arduino board began running the current script.
vReal[i] = analogRead(A0); //Reads the value from analog pin 0 (A0), quantize it and save it as a real term.
vImag[i] = 0; //Makes imaginary term 0 always
/*remaining wait time between samples if necessary*/
51
while (micros() < (microSeconds + samplingPeriod))
{
//do nothing
}
}
/*Perform FFT on samples*/
FFT.Windowing(vReal, SAMPLES, FFT_WIN_TYP_HAMMING, FFT_FORWARD);
FFT.Compute(vReal, vImag, SAMPLES, FFT_FORWARD); FFT.ComplexToMagnitude(vReal, vImag, SAMPLES);
/*Find peak frequency and print peak*/
peak = FFT.MajorPeak(vReal, SAMPLES, SAMPLING_FREQUENCY);
// Serial.println(peak); //Print out the most dominant frequency. delay(10);
}
#endif
